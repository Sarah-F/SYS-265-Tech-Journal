Power down web01, nmon01, and docker01

Set ansible1, ansible2, and controller to LAN-sarah.fornaldes instead of WAN

Set up IP addresses using nmtui:
$nmtui
Select Edit a connection
Select ens192
Go to IPv4 configuartion and select manual
Use the right arrow and click show
Enter the following info
    IP Address: 10.0.5.x/24
    Subnet mask: 255.255.255.0
    Default Gateway: 10.0.5.2
    DNS server: 10.0.5.5
    Search Domains: sarah.local

    ansible1 10.0.5.91
    ansible2 10.0.5.92
    controller 10.0.5.90
Press Ok
Select Set a system hostname and type name of vm (ansible1-sarah, ansible2-sarah)
Press Quit

For controller-sarah.fornaldes you need to do the following 
How to configure IP address in ubuntu
      cd /etc/netplan
      sudo nano 01-netcfg.yaml
         network:
          version: 2
          renderer: networkd
          ethernets:
            ens160:
              dhcp4: no
              addresses: [10.0.5.90/24]
              gateway4: 10.0.5.2
              nameservers:
                  search: [sarah.local]
                  addresses: [10.0.5.5]
      (use space, not tab, exit and save)
      Once done save and close the file and apply the changes with:
      $sudo netplan apply

      Verify the changes by typing:
      $ip addr
      https://linuxize.com/post/how-to-configure-static-ip-address-on-ubuntu-18-04/ 

How to change hostname
    1. Change the hostname using hostnamectl. #
      $sudo hostnamectl set-hostname controller-sarah
    2. Edit the /etc/hosts file.
      $sudo nano /etc/hosts
        change line 2 from ubuntu to controller-sarah  
    3. Edit the cloud.cfg file. #
      To check if the package is installed run the following ls command :
      $ls -l /etc/cloud/cloud.cfg
      $sudo vim /etc/cloud/cloud.cfg
        Search for preserve_hostname and change the value from false to true, Save the file and close your editor.
      To Verify the change #
      $hostname
      https://linuxize.com/post/how-to-change-hostname-on-ubuntu-18-04/

Linux Accounts
Create the following Linux accounts:
On controller, create a named sudo user (your name), another sudo user named deployer
    How to add a privilaged user and add group
      $id
      $sudo adduser sarah
      $sudo usermod -aG sudo sarah
      $sudo adduser deployer
      $sudo usermod -aG sudo deployer
      
      On ansible1 and ansible2, create a sudo user named deployer.  All deployer passwords should be the same
      $sudo adduser deployer
      $sudo passwd deployer
      $sudo usermod -aG wheel deployer


DNS: Add a DNS record for your three new systems.
  Open ServerManager
  Go to DNS tab
  Right click on AD01-sarah
  Select DNS Manager
  Add A and PTR records for ansible1-sarah, ansible2-sarah, controller-sarah

Deliverable 1.  A screenshot similar to the one below showing an SSH session from mgmt01 to controller and within that session a DNS lookup for controller against ad01, pinging ansible1,ansible2 and champlain.edu
Use PuTTy to log into controller-sarah
$nslookup controller-sarah ad01-sarah
$ping -c1 ansible1-sarah
$ping -c1 ansible2-sarah
$ping -c1 champlain.edu

Deliverable 2.
In same putty 
$sudo su -deployer
$sudo -i

Installing Ansuble
$sudo apt install ansible sshpass python3-paramiko

Deliverable 3.  Provide a screenshot similar to the one below, indicating a successful ansible installation:
$ansible --version

Create /etc/sudoers.d/sys265 on all Linux systems.
PuTTy on to deployer@controller-sarah(use tabs)
$sudo nano /etc/sudoers.d/sys265
    deployer  ALL=(ALL)  NOPASSWD: ALL
Do the same on deployer@ansible1-sarah(use tabs)
Do the same on deployer@ansible2-sarah(use tabs)

As the deployer user on controller, create an RSA keypair with a passphrase protected private key and using ssh-copy-id, add deployer@controller's public key to the deployer accounts on ansible1 and ansible2.
$ssh-keygen -t rsa -C "sys265"
$ssh-copy-id -i ~/.ssh/id_rsa.pub deployer@ansible1-sarah
$ssh-copy-id -i ~/.ssh/id_rsa.pub deployer@ansible2-sarah
$eval $(ssh-agent)
$ssh-add -t 14400
$ssh deployer@ansible2-sarah
$exit

Deliverable 4.  Demonstrate passwordless ssh with rsa authentication to both ansible1 and ansible2 from controller.  Provide a screenshot similar to the one below that shows passwordless authentication and then passwordless elevation to root on each system.
PuTTy on to deployer@controller-sarah
$ssh ansible1-sarah
$sudo -i
$exit
$exit
$ssh ansible1-sarah
$sudo -i
$exit
$exit

First run
Setup the following directory hierarchy and inventory file on controller-yourname.  The assumption is that ansible1-yourname and ansible2-yourname resolve via DNS.  Run the first ansible ping.  
$pwd
$mkdir -p ansible/roles
$cd ansible/
$echo ansible1-sarah >> inventory.txt
$echo ansible2-sarah >> inventory.txt
$cat inventory.txt
$ansible all -m ping -i inventory.txt

Try a few ad-hoc operating system commands similar to the use of id below.
$ansible all -a id -i inventory.txt

Deliverable 5.  Provide a screenshot of one of your executed commands (not id)
$nano inventory.txt
type [webmin] between the lines that say ansible1 and ansible2

webmin playbook installation
$ansible-galaxy install semuadmin.webmin -p roles/
$ls roles/

Configure the inventory so that ansible2 is in the webmin group.  Create a playbook called webmin.yml within the roles directory that has the displayed content.  Don't use tabs, use two spaces for indentation.
$nano roles/webmin.yml
---
- name: webmin SYS265
  hosts: webmin
  become: true
  vars:
    install_utilities: false
    firewalld_enable: true
  roles:
  - semuadmin.webmin
 
  tasks:
  - name: add firewall rule
    firewalld:
      port: 10000/tcp
      permanent: true
      state: enabled

$cat roles/webmin.yml

Execute the playbook (may take a moment):
$ansible-playbook -i inventory.txt roles/wembin.yml

PuTTY to deployer@ansible2
$sudo firewall-cmd --permanent --add-port=10000/tcp
$sudo firewall-cmd --reload
$sudo firewall-cmd --query-port=10000/tcp

Login to webmin as root@ansible2
Open browser and type the following line into the url bar
https://ansible2-sarah.sarah.local:10000

Deliverable 6.  Provide a screenshot that shows some aspect of Webmin's logged-in interface like the one shown below:
Take similiar screenshot

Ansible Galaxy
Head over to galaxy.ansible.com and spend some time looking for roles that are built for CentOS, Redhat or EL version 7.
Take similiar screenshot
galaxy.ansible.com

Deliverable 7:  Deploy a different role to ansible1.  Provide a screenshot of your successful playbook execution
$nano inventory.txt
type [datadog] above ansible1
$cat inventory.txt
$ansible-galaxy install datadog.datadog -p roles/
$nano roles/datadog.yml
    ---
      - hosts: datadog
        remote_user: deployer
        become: yes
        roles:
          - roles: datadog.datadog
        vars:
          install_utilities: true
          firewall_enable: true
          
        tasks:
          - name: add firewall rule
            firewalld:
              port: 5002/tcp
              permanent: true
              state: enabled

$cat roles/datadog.yml
$ansible-playbook -i inventory.txt roles/datadog.yml

PuTTY to deployer@ansible1
$sudo firewall-cmd --permanent --add-port=5002/tcp
$sudo firewall-cmd --reload
$sudo firewall-cmd --query-port=5002/tcp

Open browser and type the following line into the url bar
https://ansible1-sarah.sarah.local
Couldn't access internet cite

Windows Automation
Preparing MGMT01 for Ansible
Make sure OpenSSH is running on mgmt01
    Select Tools in top right corner 
    Computer Managment
    Services and Applications
    Look for OpenSSH SSH Server, scrool to right make sure its running

Set Powershell to be the Default Shell for SSH
If you get a normal command prompt when logging in over SSH, Run the following 2 commands to change the ssh shell to powershell (Do not hand type this)
    Putty into deployer@controller-sarah
    $ssh sarah.fornaldes-adm@sarah.local@mgmt01-sarah
    if ssh takes you to a powershell you do not need to enter the following commands, make sure to check the bar on the top bcuz the powershell will be black
    Open command prompt
    $Set-ItemProperty "HKLM:\Software\Microsoft\Powershell\1\ShellIds" -Name ConsolePrompting -Value $true
    $New-ItemProperty -Path HKLM:\SOFTWARE\OpenSSH -Name DefaultShell -Value "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -PropertyType String -Force

Update your inventory file to add a new group called windows with mgmt01-yourname as the host in that group.  Also include the variables associated with that group [windows:vars].
$exit (you want to be back to deployer@controller-sarah: ~/ansible$)
$nano inventory.txt
at the bottom type 
    [windows]
    mgmt01-sarah
    [windows:vars]
    ansible_shell_type=powershell

Deliverable 10.  Provide a screenshot similar to the one below that shows a successful win_ping from controller to mgmt01.
$ansible windows -i inventory.txt -m win_ping -u sarah.fornaldes-adm@sarah.local --ask-pass

Add wks1 to your inventory under the windows category and rerun the win_ping.  You will likely get the following common error.
$nano inventory.txt
type wks01-sarah beneath mgmt01-sarah (between mgmt01-sarah and [windows:vars]

You can fix this in one of two ways.  The first would be to ssh into wks1 first and accept the key. The second would be to ignore unknown hosts and you would do so by adding the following file to the directory in which you are running your ansible commands.
$pwd
$nano ansible.cfg
    [defaults]
    host_key_checking = false
$cat ansible.cfg

Deliverable 11.  Rerun the playbook with successful pings on wks1 and mgmt1 similar to the one below
$ansible windows -i inventory.txt -m win_ping -u sarah.fornaldes-adm@sarah.local --ask-pass
wks cant connect

Construct a new playbook within the roles directory called windows_software.yml.  This is a simple playbook that uses built-in ansible functionality as opposed to a downloaded role.  The list of tasks below will use a module called win_chocolatey which is a package manager for Windows similar to apt-get or yum that is becoming more popular in enterprises.
Deliverable 12.  Provide a screenshot showing the successful playbook run and software Installation

$nano inventory.txt
type [windows_software] above mgmt01-sarah

type the following at the bottom
    ansible_user=sarah.fornaldes-adm@sarah.local
    ansible_connection=winrm
    ansible_winrm_server_cert_validation=ignore
    ansible_winrm_transportation=nylm
    ansible_winrm_port=5986
$cat inventory.txt


$nano roles/windows_software.yml
    ---
    - name: install windows applications
      hosts: windows
      tasks:
        - name: Install Firefox and 7zip
        win_chocolatey:
          name:
          - firefox
          - 7zip
          state: present
$cat roles/windows_software.yml
Installation
$ansible-playbook -i inventory.txt roles/windows_software.yml - u sarah.fornaldes-adm@sarah.local --ask-pass
